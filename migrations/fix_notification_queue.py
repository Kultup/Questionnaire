#!/usr/bin/env python3
"""
–ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ notification_queue
"""

import sqlite3
import os

def run_migration():
    """–ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫"""
    
    # –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db_path = os.path.join('instance', 'feedback_system.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    print("–ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ notification_queue...")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—é—Ç—å –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("PRAGMA table_info(notification_queue)")
        columns = [column[1] for column in cursor.fetchall()]
        
        print(f"–Ü—Å–Ω—É—é—á—ñ –∫–æ–ª–æ–Ω–∫–∏: {columns}")
        
        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        if 'survey_id' not in columns:
            print("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ survey_id...")
            cursor.execute('''
                ALTER TABLE notification_queue 
                ADD COLUMN survey_id INTEGER REFERENCES surveys(id)
            ''')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ survey_id –¥–æ–¥–∞–Ω–∞")
        
        if 'metadata_json' not in columns:
            print("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ metadata_json...")
            cursor.execute('''
                ALTER TABLE notification_queue 
                ADD COLUMN metadata_json TEXT
            ''')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ metadata_json –¥–æ–¥–∞–Ω–∞")
        
        # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫—É message –Ω–∞ message_content, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if 'message' in columns and 'message_content' not in columns:
            print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            cursor.execute('''
                CREATE TABLE notification_queue_new (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id),
                    survey_id INTEGER REFERENCES surveys(id),
                    notification_type VARCHAR(20) NOT NULL,
                    message_content TEXT NOT NULL,
                    status VARCHAR(20) NOT NULL DEFAULT 'pending',
                    retry_count INTEGER NOT NULL DEFAULT 0,
                    max_retries INTEGER NOT NULL DEFAULT 3,
                    scheduled_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    sent_at TIMESTAMP,
                    error_message TEXT,
                    metadata_json TEXT,
                    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ –∑ —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute('''
                INSERT INTO notification_queue_new 
                (id, user_id, notification_type, message_content, status, retry_count, 
                 max_retries, scheduled_at, sent_at, error_message, created_at, updated_at)
                SELECT id, user_id, notification_type, message, status, retry_count,
                       max_retries, scheduled_at, sent_at, error_message, created_at, updated_at
                FROM notification_queue
            ''')
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute('DROP TABLE notification_queue')
            
            # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute('ALTER TABLE notification_queue_new RENAME TO notification_queue')
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤...")
        try:
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_notification_queue_status ON notification_queue(status)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_notification_queue_scheduled ON notification_queue(scheduled_at)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_notification_queue_user ON notification_queue(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_notification_queue_survey ON notification_queue(survey_id)')
            print("‚úÖ –Ü–Ω–¥–µ–∫—Å–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        except sqlite3.Error as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤: {e}")
        
        conn.commit()
        print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("PRAGMA table_info(notification_queue)")
        new_columns = cursor.fetchall()
        print("–ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ:")
        for column in new_columns:
            print(f"  {column[1]} ({column[2]}) - NOT NULL: {column[3]}, DEFAULT: {column[4]}, PK: {column[5]}")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        if conn:
            conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

if __name__ == '__main__':
    success = run_migration()
    if success:
        print("üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("üí• –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è!")
        exit(1)