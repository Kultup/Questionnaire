"""
Telegram Service Module
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –≥—Ä—É–ø–∏
"""

import requests
import logging
from typing import Optional, Dict, Any
import asyncio
from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Telegram Bot API"""
    
    def __init__(self, bot_token: str):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def validate_bot_token(self) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        
        Returns:
            Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        try:
            response = requests.get(f"{self.base_url}/getMe", timeout=10)
            
            if response.status_code == 200:
                bot_info = response.json()
                if bot_info.get('ok'):
                    return {
                        'valid': True,
                        'bot_info': bot_info.get('result', {}),
                        'error': None
                    }
                else:
                    return {
                        'valid': False,
                        'bot_info': None,
                        'error': bot_info.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
                    }
            else:
                return {
                    'valid': False,
                    'bot_info': None,
                    'error': f'HTTP {response.status_code}: {response.text}'
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error validating bot token: {e}")
            return {
                'valid': False,
                'bot_info': None,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}'
            }
    
    def get_chat_info(self, chat_id: str) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç/–≥—Ä—É–ø—É
        
        Args:
            chat_id: ID —á–∞—Ç—É –∞–±–æ –≥—Ä—É–ø–∏
            
        Returns:
            Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —á–∞—Ç
        """
        try:
            response = requests.get(
                f"{self.base_url}/getChat",
                params={'chat_id': chat_id},
                timeout=10
            )
            
            if response.status_code == 200:
                chat_info = response.json()
                if chat_info.get('ok'):
                    return {
                        'success': True,
                        'chat_info': chat_info.get('result', {}),
                        'error': None
                    }
                else:
                    return {
                        'success': False,
                        'chat_info': None,
                        'error': chat_info.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
                    }
            else:
                return {
                    'success': False,
                    'chat_info': None,
                    'error': f'HTTP {response.status_code}: {response.text}'
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error getting chat info: {e}")
            return {
                'success': False,
                'chat_info': None,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}'
            }
    
    def get_available_groups(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø –∑ –æ–Ω–æ–≤–ª–µ–Ω—å –±–æ—Ç–∞
        
        Returns:
            Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏
        """
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            response = requests.get(
                f"{self.base_url}/getUpdates",
                params={'limit': 100},
                timeout=10
            )
            
            if response.status_code != 200:
                return {
                    'success': False,
                    'groups': [],
                    'error': f'HTTP {response.status_code}: {response.text}',
                    'instructions': '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.'
                }
            
            updates_data = response.json()
            if not updates_data.get('ok'):
                return {
                    'success': False,
                    'groups': [],
                    'error': updates_data.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'),
                    'instructions': '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞.'
                }
            
            updates = updates_data.get('result', [])
            groups = {}
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –≥—Ä—É–ø
            for update in updates:
                chat = None
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω—å
                if 'message' in update:
                    chat = update['message'].get('chat')
                elif 'edited_message' in update:
                    chat = update['edited_message'].get('chat')
                elif 'channel_post' in update:
                    chat = update['channel_post'].get('chat')
                elif 'edited_channel_post' in update:
                    chat = update['edited_channel_post'].get('chat')
                elif 'my_chat_member' in update:
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞ –≤ —á–∞—Ç—ñ
                    chat = update['my_chat_member'].get('chat')
                
                if chat and chat.get('type') in ['group', 'supergroup']:
                    chat_id = str(chat.get('id'))
                    chat_title = chat.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
                    chat_type = chat.get('type')
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥—Ä—É–ø–∏
                    if chat_id not in groups:
                        groups[chat_id] = {
                            'id': chat_id,
                            'title': chat_title,
                            'type': chat_type,
                            'username': chat.get('username', None)
                        }
            
            if not groups:
                return {
                    'success': True,
                    'groups': [],
                    'error': None,
                    'instructions': '–ì—Ä—É–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ:\n1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –¥–µ —î –±–æ—Ç\n2. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –≥—Ä—É–ø–∏ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –≥—Ä—É–ø—ñ\n4. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω'
                }
            
            return {
                'success': True,
                'groups': list(groups.values()),
                'error': None,
                'instructions': None
            }
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Error getting available groups: {e}")
            return {
                'success': False,
                'groups': [],
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}',
                'instructions': '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
            }
    
    def send_group_discovery_message(self, chat_id: str) -> Dict[str, Any]:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è ID –≥—Ä—É–ø–∏
        
        Args:
            chat_id: ID —á–∞—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            
        Returns:
            Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —á–∞—Ç —Ç–∞ –π–æ–≥–æ ID
        """
        try:
            message = "ü§ñ –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º\n\n–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î, —â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ."
            
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json={
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'HTML'
                },
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    message_data = result.get('result', {})
                    chat_data = message_data.get('chat', {})
                    
                    return {
                        'success': True,
                        'chat_info': {
                            'id': str(chat_data.get('id')),
                            'title': chat_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏'),
                            'type': chat_data.get('type'),
                            'username': chat_data.get('username')
                        },
                        'error': None
                    }
                else:
                    return {
                        'success': False,
                        'chat_info': None,
                        'error': result.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
                    }
            else:
                return {
                    'success': False,
                    'chat_info': None,
                    'error': f'HTTP {response.status_code}: {response.text}'
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error sending group discovery message: {e}")
            return {
                'success': False,
                'chat_info': None,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}'
            }
    
    def send_message_to_chat(self, chat_id: str, message: str, parse_mode: str = 'HTML') -> Dict[str, Any]:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –∞–±–æ –≥—Ä—É–ø—É
        
        Args:
            chat_id: ID —á–∞—Ç—É –∞–±–æ –≥—Ä—É–ø–∏
            message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É (HTML –∞–±–æ Markdown)
            
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        try:
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    return {
                        'success': True,
                        'message_info': result.get('result', {}),
                        'error': None
                    }
                else:
                    return {
                        'success': False,
                        'message_info': None,
                        'error': result.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
                    }
            else:
                return {
                    'success': False,
                    'message_info': None,
                    'error': f'HTTP {response.status_code}: {response.text}'
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error sending message to chat {chat_id}: {e}")
            return {
                'success': False,
                'message_info': None,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}'
            }
    
    def send_test_message(self, chat_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        Args:
            chat_id: ID —á–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—è–∫—â–æ None, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –±–æ—Ç—É)
            
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        """
        test_message = """
ü§ñ <b>–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>

‚úÖ –í–∞—à Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!
üì± –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –≤—ñ–¥–≥—É–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –≤ —Ü—é –≥—Ä—É–ø—É.

<i>–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏.</i>
        """.strip()
        
        if chat_id:
            return self.send_message_to_chat(chat_id, test_message)
        else:
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É (getMe)
            try:
                response = requests.get(f"{self.base_url}/getMe", timeout=10)
                if response.status_code == 200:
                    return {
                        'success': True,
                        'message_info': {'test': 'Bot token is valid'},
                        'error': None
                    }
                else:
                    return {
                        'success': False,
                        'message_info': None,
                        'error': '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞'
                    }
            except Exception as e:
                return {
                    'success': False,
                    'message_info': None,
                    'error': str(e)
                }
    
    def check_bot_permissions(self, chat_id: str) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ
        
        Args:
            chat_id: ID –≥—Ä—É–ø–∏
            
        Returns:
            Dict –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
            bot_info = self.validate_bot_token()
            if not bot_info['valid']:
                return {
                    'success': False,
                    'permissions': None,
                    'error': '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞'
                }
            
            bot_id = bot_info['bot_info']['id']
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç—ñ
            response = requests.get(
                f"{self.base_url}/getChatMember",
                params={'chat_id': chat_id, 'user_id': bot_id},
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    member_info = result.get('result', {})
                    status = member_info.get('status')
                    
                    if status in ['administrator', 'creator']:
                        return {
                            'success': True,
                            'permissions': {
                                'status': status,
                                'can_send_messages': True,
                                'member_info': member_info
                            },
                            'error': None
                        }
                    elif status == 'member':
                        return {
                            'success': True,
                            'permissions': {
                                'status': status,
                                'can_send_messages': True,
                                'member_info': member_info
                            },
                            'error': None
                        }
                    else:
                        return {
                            'success': False,
                            'permissions': None,
                            'error': f'–ë–æ—Ç –º–∞—î —Å—Ç–∞—Ç—É—Å "{status}" —ñ –Ω–µ –º–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
                        }
                else:
                    return {
                        'success': False,
                        'permissions': None,
                        'error': result.get('description', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞')
                    }
            else:
                return {
                    'success': False,
                    'permissions': None,
                    'error': f'HTTP {response.status_code}: {response.text}'
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error checking bot permissions: {e}")
            return {
                'success': False,
                'permissions': None,
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}'
            }


def create_feedback_message(restaurant_name: str, waiter_name: str, overall_score: int, 
                          answers: list, survey_id: int = None) -> str:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫
    
    Args:
        restaurant_name: –ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        waiter_name: –Ü–º'—è –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç–∞
        overall_score: –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        answers: –°–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
        survey_id: ID –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    message = f"üçΩÔ∏è <b>–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –¥–ª—è {restaurant_name}</b>\n\n"
    message += f"üë®‚Äçüíº <b>–û—Ñ—ñ—Ü—ñ–∞–Ω—Ç:</b> {waiter_name}\n"
    message += f"‚≠ê <b>–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:</b> {overall_score}/10\n"
    
    if survey_id:
        message += f"üÜî <b>ID –≤—ñ–¥–≥—É–∫—É:</b> #{survey_id}\n"
    
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    for answer in answers:
        question_text = answer.get('question', '')
        answer_value = answer.get('answer', '')
        comment = answer.get('comment', '')
        question_type = answer.get('type', 'yes_no')
        
        if question_type == 'yes_no':
            message += f"‚ùì <b>{question_text}</b>\n"
            answer_emoji = "‚úÖ" if answer_value == '–¢–∞–∫' else "‚ùå"
            message += f"{answer_emoji} <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {answer_value}\n"
            if comment:
                message += f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> <i>{comment}</i>\n"
        else:
            message += f"üìù <b>{question_text}</b>\n"
            message += f"üí≠ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> <i>{answer_value}</i>\n"
        
        message += "\n"
    
    return message